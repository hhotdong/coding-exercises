// https://school.programmers.co.kr/learn/courses/30/lessons/49994?language=csharp
using System;
using System.Collections.Generic;

public struct Coordinate
{
    public int X;
    public int Y;

    public Coordinate(int x, int y)
    {
        X = x;
        Y = y;
    }
    
    public static bool operator==(Coordinate lhs, Coordinate rhs)
    {
        return lhs.X == rhs.X && lhs.Y == rhs.Y;
    }
    
    public static bool operator!=(Coordinate lhs, Coordinate rhs)
    {
        return (lhs == rhs) == false;
    }
    
    public override bool Equals(object o)
    {
        if ((o is Coordinate) == false)
            return false;
        return this == (Coordinate)o;
    }
    
    public override int GetHashCode()
    {
        return HashCode.Combine(X, Y);
    }
}

public class Edge
{   
    public Coordinate StartCoord;
    public Coordinate EndCoord;
    
    public Edge(int startX, int startY, int endX, int endY)
    {
        StartCoord = new Coordinate(startX, startY);
        EndCoord   = new Coordinate(endX  , endY);
    }
    
    public static bool operator==(Edge lhs, Edge rhs)
    {
        return lhs.Equals(rhs);
    }
    
    public static bool operator!=(Edge lhs, Edge rhs)
    {
        return lhs.Equals(rhs) == false;
    }
    
    public override bool Equals(object o)
    {
        if ((o is Edge) == false)
            return false;
        return this.Equals((Edge)o);
    }
    
    public bool Equals(Edge other)
    {
        return (this.StartCoord == other.StartCoord && this.EndCoord == other.EndCoord) 
            || (this.StartCoord == other.EndCoord && this.EndCoord == other.StartCoord);
    }
    
    public override int GetHashCode()
    {
        return HashCode.Combine(this.StartCoord, this.EndCoord);
    }
}

public class Solution {
    public int solution(string dirs) {
        int answer = 0;
        Coordinate prevCoord = new Coordinate(0, 0);
        Coordinate curCoord  = new Coordinate(0, 0);
        List<Edge> edges = new List<Edge>();
        
        for (int i = 0; i < dirs.Length; i++)
        {
            prevCoord = curCoord;
            
            char ch = dirs[i];
            if (ch == 'U')
            {
                if (curCoord.Y < 5)
                    ++curCoord.Y;
            }
            else if (ch == 'D')
            {
                if (curCoord.Y > -5)
                    --curCoord.Y;
            }
            else if (ch == 'R')
            {
                if (curCoord.X < 5)
                    ++curCoord.X;
            }
            else if (ch == 'L')
            {
                if (curCoord.X > -5)
                    --curCoord.X;
            }
            
            if (prevCoord.X != curCoord.X || prevCoord.Y != curCoord.Y)
            {
                var newEdge = new Edge(prevCoord.X, prevCoord.Y, curCoord.X, curCoord.Y);
                bool isDuplicate = false;
                    
                for (int j = 0; j < edges.Count; j++)
                {
                    if (edges[j].Equals(newEdge))
                    {
                        isDuplicate = true;
                        break;
                    }
                }
                
                if (isDuplicate == false)
                    edges.Add(newEdge);
            }
        }
        answer = edges.Count;
        return answer;
    }
}